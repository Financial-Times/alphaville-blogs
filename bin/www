#!/usr/bin/env node

"use strict";

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('alphaville-blogs:server');
const http = require('http');
const db = require('../lib/services/db');
const { sortArticles } = require('../lib/utils/marketsLiveArticles');
require('../lib/dbModels');
const throng = require('throng');

const concurrency = process.env.WEB_CONCURRENCY || 1;

throng({
	workers: concurrency,
	lifetime: Infinity,
	start: start
});

function start() {
	console.log('Started worker');

	process.on('SIGTERM', function() {
		console.log('Worker exiting');
		process.exit();
	});

	// force GC to 80% of available memory
	const v8 = require('v8');

	if(process.env.WEB_MEMORY) {
		const gcMemory = Math.floor(parseInt(process.env.WEB_MEMORY, 10) * 4 / 5);
		v8.setFlagsFromString(`--max_old_space_size=${gcMemory}`);
	}

	/**
	 * Get port from environment and store in Express.
	 */

	const port = normalizePort(process.env.PORT || '3000');
	app.set('port', port);

	/**
	 * Create HTTP server.
	 */

	const server = http.createServer(app);

	/**
	 * Listen on provided port, on all network interfaces.
	 */

	db.connect(async () => {
		/**
		 * Sort archived Marketslive articles before the app starts because, if you don't do this,
		 * they will render on the page very slowly.
		 */
		await sortArticles();

		server.listen(port, function () {
			console.log('listening on port: ', port);
		});
		server.on('error', onError);
		server.on('listening', onListening);
	});


	/**
	 * Normalize a port into a number, string, or false.
	 */

	function normalizePort(val) {
		const port = parseInt(val, 10);

		if (isNaN(port)) {
			// named pipe
			return val;
		}

		if (port >= 0) {
			// port number
			return port;
		}

		return false;
	}

	/**
	 * Event listener for HTTP server "error" event.
	 */

	function onError(error) {
		if (error.syscall !== 'listen') {
			throw error;
		}

		const bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port;

		// handle specific listen errors with friendly messages
		switch (error.code) {
			case 'EACCES':
				console.error(bind + ' requires elevated privileges');
				process.exit(1);
				break;
			case 'EADDRINUSE':
				console.error(bind + ' is already in use');
				process.exit(1);
				break;
			default:
				throw error;
		}
	}

	/**
	 * Event listener for HTTP server "listening" event.
	 */

	function onListening() {
		const addr = server.address();
		const bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
		debug('Listening on ' + bind);
	}
}
